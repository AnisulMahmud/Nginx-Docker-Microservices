worker_processes auto;

events {
    worker_connections 1024;
}

http {
    upstream service1_backend {
        server service1-1:8199;
        server service1-2:8199;
        server service1-3:8199;
    }

    upstream service2_backend {
        server service2:5000;  # Assuming service2 is on port 5000
    }

    server {
        listen 80;

        # Basic Authentications
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;
        # Prevent caching globally
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";


        # Set the root and index directive
        root /usr/share/nginx/html;  # This is where NGINX will look for the index.html
        index index.html;            # Ensure the index.html file is served by default

        # Root location - Basic Authentication applied
        location / {
            if ($http_x_state = "INIT") {
                return 401;
            }
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
            try_files $uri $uri/ =404;  # Serve static files or return a 404 error if not found
        }

        # Proxy requests to /api/ to service1_backend
        location /api/ {
            proxy_pass http://service1_backend;  # Forward to upstream cluster
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header X-Upstream-Server $upstream_addr;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        }

        # Proxy requests to /api/stop to service1_backend
        location = /api/stop {
            proxy_pass http://service1_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        }

        # Proxy state-related endpoints to service2_backend
        location /state {
            if ($http_x_state = "INIT") {
                return 401;
            }
            
            proxy_pass http://service2_backend/state;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";

        
        }

        location /run-log {
            proxy_pass http://service2_backend/run-log;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";


            satisfy any;
            allow all;
        }

        location /request {
            proxy_pass http://service2_backend/request;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        }

        location /logout {
            proxy_pass http://service2_backend/logout;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header WWW-Authenticate $upstream_http_www_authenticate;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        }

    }
}
