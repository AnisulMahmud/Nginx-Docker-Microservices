stages:
  - build
  - test
  - deploy

# Variables for Docker-in-Docker setup
variables:
  DOCKER_HOST: tcp://docker:2375  # Docker Daemon URL (DinD)
  DOCKER_TLS_CERTDIR: ""  # Disable TLS for Docker-in-Docker
  DOCKER_DRIVER: overlay2  # Docker storage driver
  DOCKER_NETWORK_MODE: bridge  # Docker network mode

# Use Docker as the base image for GitLab CI
image: docker:latest

# Docker-in-Docker service configuration
services:
  - name: docker:dind  # Docker-in-Docker service
    alias: docker  # Alias for Docker service
    command: ["--tls=false"]  # Disable TLS for Docker-in-Docker

# Before script that runs common setup steps
before_script:
  - apk update
  - apk add --no-cache docker-compose python3 git  # Install Docker Compose, Python3, and Git
  # Diagnostic commands to ensure everything is working
  - echo "Hostname resolution:"
  - cat /etc/hosts
  - echo "Trying to resolve docker:"
  - nslookup docker || true
  - echo "Checking network interfaces:"
  - ip addr

# Build Stage: Build all the services using Docker Compose
build_services:
  stage: build
  script:
    - cd $CI_PROJECT_DIR  # Navigate to the GitLab project directory
    - docker-compose build  # Build the Docker containers using docker-compose
  only:
    - project  # Run only for the 'project' branch

# Test Stage: Validate Docker Compose file and perform a dry run of builds
test_config:
  stage: test
  script:
    - cd $CI_PROJECT_DIR  # Navigate to the GitLab project directory
    - docker-compose config  # Validate the docker-compose.yml file
    - docker-compose build --dry-run  # Perform a dry-run to check build process
  only:
    - project  # Run only for the 'project' branch

# Deploy Stage: Deploy the services using Docker Compose
deploy_services:
  stage: deploy
  script:
    - cd $CI_PROJECT_DIR  # Navigate to the GitLab project directory
    - docker-compose up -d  # Run the services in detached mode
  only:
    - project  # Run only for the 'project' branch
  when: manual  # Allow manual deployment via GitLab UI
