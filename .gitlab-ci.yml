stages:
  - build
  - test
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375   # Docker Daemon URL (DinD)
  DOCKER_TLS_CERTDIR: ""           # Disable TLS for Docker-in-Docker
  DOCKER_DRIVER: overlay2          # Docker storage driver
  DOCKER_NETWORK_MODE: bridge      # Docker network mode

image: docker:latest               # Use Docker image for GitLab runner

services:
  - name: docker:dind              # Docker-in-Docker service
    alias: docker                  # Alias for Docker service
    command: ["--tls=false"]       # Disable TLS for Docker-in-Docker

before_script:
  - apk update
  - apk add --no-cache docker-compose python3 git  # Install Docker Compose, Python3, and Git
  # Diagnostic commands to ensure everything is working
  - echo "Hostname resolution:"
  - cat /etc/hosts
  - echo "Trying to resolve docker:"
  - nslookup docker || true
  - echo "Checking network interfaces:"
  - ip addr

# Build Stage: Build all the services using Docker Compose
build_services:
  stage: build
  script:
    - cd $CI_PROJECT_DIR
    - docker-compose build
  only:
    - main  # Adjust the branch name accordingly (e.g., 'main' or 'project')

# Test Stage: Validate Docker Compose file and run a dry run of builds
test_config:
  stage: test
  script:
    - cd $CI_PROJECT_DIR
    - docker-compose config  # Validate the docker-compose.yml file
    - docker-compose build --dry-run  # Dry-run to check the build process
  only:
    - main  # Adjust the branch name accordingly (e.g., 'main' or 'project')

# Deploy Stage: Deploy the services using Docker Compose
deploy_services:
  stage: deploy
  script:
    - cd $CI_PROJECT_DIR
    - docker-compose up -d  # Run the services in detached mode
  only:
    - project  # Adjust the branch name accordingly
  when: manual  # Deploy is triggered manually in the GitLab UI
